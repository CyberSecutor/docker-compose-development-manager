#!/usr/bin/env bash
# vim: et:sw=2:ts=2:ai

# Load environment variables
load_env() {
  # We use "tr" to translate the uppercase "uname" output into lowercase
  UNAME=$(uname -s | tr '[:upper:]' '[:lower:]')
  # Then we map the output to the names used on the Github releases page
  case "$UNAME" in
      linux*)     MACHINE=linux;;
      darwin*)    MACHINE=macos;;
      mingw*)     MACHINE=windows;;
  esac

  # Check if docker-compose.yml exists
  if [ ! -e "${APP_PROJECT_PATH}/docker-compose.yml" ] && [ ! -e "${APP_PROJECT_PATH}/docker-compose.yaml" ]; then
    echo "Docker compose file not found."
    return 1
  fi

  # Configure .env files
  local env="${APP_PROJECT_PATH}/.env"
  local env_local="${APP_PROJECT_PATH}/.env.local"

  # Set the default environment
  export SPECIFIED_ENV=dev

  HOST_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
  export HOST_IP
  export SSH_AUTH_SOCK

  # Load all variables as if they are exported
  set -a

  # Check and load if environment .env file exists
  # shellcheck source=.env
  if [ -e "$env_local" ]; then
    source "$env"
  fi

  # Check and load if environment local .env file exists
  # shellcheck source=.env.local
  if [ -e "$env_local" ]; then
    source "$env_local"
  fi

  # Configure .env files for specified SPECIFIED_ENV
  local specified_env="${APP_PROJECT_PATH}/.env.${SPECIFIED_ENV}"
  local specified_env_local="${APP_PROJECT_PATH}/.env.${SPECIFIED_ENV}.local"

  # Check and load if environment specific .env file exists
  # shellcheck source=.env.dev
  if [ -e "$specified_env" ]; then
    source "$specified_env"
  fi

  # Check and load if environment specific local .env file exists
  # shellcheck source=.env.dev.local
  if [ -e "$specified_env_local" ]; then
    source "$specified_env_local"
  fi

  # Don't automatically export set variables
  set +a

  export PROJECT=${APP_PROJECT}
  GID=$(id -g)
  export GID
  export UID
  if [[ "${MACHINE}" == "windows" ]]; then
    DC="winpty docker-compose"
    CUID="1000"
    CGID="1000"
    CHOME="/home/app"
  else
    DC="docker-compose"
    CUID="${UID}"
    CGID="${GID}"
    CHOME="${HOME}"
  fi
  export CUID
  export CGID
  export CHOME

  # Ensure composer home directory exists
  if [ -n "${COMPOSER_HOME_LOCAL}" ]; then
    eval COMPOSER_HOME_LOCAL="$COMPOSER_HOME_LOCAL"
    if [ ! -d "${COMPOSER_HOME_LOCAL}" ]; then
      mkdir -p "${COMPOSER_HOME_LOCAL}"
    fi
    export COMPOSER_HOME_LOCAL
  fi

  # Ensure Git configuration file exists
  if [ -n "${GIT_CONFIG_LOCAL}" ]; then
    eval GIT_CONFIG_LOCAL="$GIT_CONFIG_LOCAL"
    if [ ! -e "${GIT_CONFIG_LOCAL}" ]; then
      touch "${GIT_CONFIG_LOCAL}"
    fi
    export GIT_CONFIG_LOCAL
  fi

  # Ensure Git ignore file exists
  if [ -n "${GIT_IGNORE_LOCAL}" ]; then
    eval GIT_IGNORE_LOCAL="$GIT_IGNORE_LOCAL"
    if [ ! -e "${GIT_IGNORE_LOCAL}" ]; then
      touch "${GIT_IGNORE_LOCAL}"
    fi
    export GIT_IGNORE_LOCAL
  fi

  # Ensure SSH directory exists
  if [ -n "${SSH_LOCAL}" ]; then
    eval SSH_LOCAL="$SSH_LOCAL"
    if [ ! -d "${SSH_LOCAL}" ]; then
      mkdir -p "${SSH_LOCAL}"
    fi
    export SSH_LOCAL
  fi
}

# Container for all supported commands
run() {

  # Turn on and attach to specified container
  attach() {
    $DC up "$1"
    return $?
  }

  # Check system and update if marked old
  autoupdate() {
    local cache_dir
    local cache_limit
    local cache_last

    cache_dir="${HOME}/.cache/development-manager-docker-compose"
    cache_limit="${HOME}/.cache/development-manager-docker-compose/limit"
    cache_last="${HOME}/.cache/development-manager-docker-compose/$(pwd | base64)"

    # Ensure cache directory exists
    if [ ! -d "${cache_dir}" ]; then
      mkdir -p "${cache_dir}"
    fi

    # Set limit of last check
    touch -d '-16 hours' "${cache_limit}"

    # Ensure a last check file exists
    if [ ! -f "${cache_last}" ]; then
      touch -d '-17 hours' "${cache_last}"
    fi

    # Check if the last check exceeds the given limit
    if [ "${cache_limit}" -nt "${cache_last}" ]; then
      touch "${cache_last}"
      echo "Checking if new images are available ..."
      # Run the pull command and download images if available
      pull
    fi

    # Remove old cache files
    find "${HOME}/.cache/development-manager-docker-compose" -type f -mtime +1 -delete
  }

  # Open the shell of a container
  console() {
    autoupdate
    local shell="console"
    [ "$1" != "" ] && shell=$1
    $DC run \
      --rm \
      -u "$(id -u):$(id -g)" \
      --no-deps \
      "$shell" \
      sh -l
    return $?
  }

  # Turn off all containers or a specific container
  down() {
    $DC down "$@"
    return $?
  }

  # Execute a command on a specified container
  exec() {
    $DC exec "$@"
    return $?
  }

  # Get help for commands
  help() {
    attach() {
      echo "Attach to a container."
      echo "Usage: $0 attach <container-name>"
      return 0
    }

    console() {
      echo "Open up a console on a service."
      echo "Usage: $0 console [service]"
      echo "Options:"
      echo "  service: Defaults to console"
      echo "Available services:"
      load_env
      $DC ps --services | xargs echo " "
      return 0
    }

    down() {
      echo "Turn off development environment."
      echo "Usage: $0 down [options...]"
      echo "For more info, see: docker-compose help down"
      return 0
    }

    exec() {
      echo "Execute a command on a specified container"
      echo "Usage: $0 exec <container> <command> [options...]"
      echo "Example: $0 dev exec redis redis-cli flushall"
      return 0
    }

    init() {
      echo "Initialize a project type for development."
      echo "Usage: $0 init [-f|--force] <project-type>"
      echo "Available project types: "
      for type in "${APP_SELF_PATH}"/templates/*; do
        echo "- $(basename "${type}")"
      done
    }

    pull() {
      echo "Pull latest development environment images."
      echo "Usage: $0 pull"
      return 0
    }

    run() {
      echo "Run a command on the development environment."
      echo "Usage: $0 run <command>"
      return 0
    }

    up() {
      echo "Turn on development environment."
      echo "Usage: $0 up [options...]"
      echo "For more info, see: docker-compose help up"
      return 0
    }

    # Attempt to run a command or output the help
    if [ "$(type -t "$1")" == "function" ]; then
      "$@"
      return $?
    else
      echo "Usage: $0 <option>"
      echo "The following options are available"
      echo "  console: Open the console"
      echo "  down: Stop the environment"
      echo "  pull: Pull latest images"
      echo "  run: Run a command"
      echo "  up: Start the environment"
    fi
    return $?
  }

  # Initialize a project type for development
  # shellcheck disable=SC2120
  init() {
    local force=0
    local type=""
    for option in "$@"; do
      case "$option" in
        -f|--force)
          force=1
          ;;
        *)
          if [ "$type" == "" ]; then
            type="$option"
          fi
          ;;
      esac
    done
    if [ "${type}" == "" ]; then
      echo "Error: Type not given"
      help init
      exit 1
    fi
    if [ ! -e "${APP_SELF_PATH}"/templates/"${type}" ]; then
      echo "Error: Type '$type' not found."
      exit 1
    fi
    if [ ! -e "${APP_PROJECT_PATH}/docker-compose.yml" ] && [ ! -e "${APP_PROJECT_PATH}/docker-compose.yaml" ] || [ "$force" == "1" ]; then
      cp -prf "${APP_SELF_PATH}"/templates/"${type}"/* "${APP_PROJECT_PATH}"
      cp -prf "${APP_SELF_PATH}"/templates/"${type}"/.[!.]* "${APP_PROJECT_PATH}"
      echo "Initialized $type project."
      return $?
    elif [ -e "${APP_PROJECT_PATH}/docker-compose.yml" ] || [ -e "${APP_PROJECT_PATH}/docker-compose.yaml" ]; then
      echo "Warning: Project already initialized. Use --force to re-initialize the project"
    fi
    run help init
    exit 1
  }

  # Pull latest images
  pull() {
    $DC pull
    return $?
  }

  # Run a command
  run() {
    autoupdate
    $DC run console "$@"
    return $?
  }

  # Turn on all containers or a specific container
  up() {
    autoupdate
    $DC up -d "$@"
    return $?
  }

  # Attempt to run a command or output the help
  if [ "$(type -t "$1")" == "function" ]; then
    if [ "$1" == "init" ] || [ "$1" == "help" ] || load_env; then
      "$@"
    fi
    return $?
  else
    help "$@"
    return 1
  fi
}

# Main process execution
main() {
  # Ensure root does not use this
  if [[ "$(id -u)" == "0" ]]; then
    echo "This script should not be run as root."
    exit 1
  fi
  # Initialize primary variables
  APP_SELF_PATH=$(dirname "$(realpath "$0")")
  APP_PROJECT_PATH=$(pwd)
  APP_PROJECT=$(basename "${APP_SELF_PATH}")

  # Run the tool
  run "$@"
  exit $?
}

# Run the manager
main "$@"
